{"meta":{"title":"Sam","subtitle":null,"description":null,"author":"刘博","url":"http://saml.vip"},"pages":[{"title":"Android","date":"2017-09-19T03:07:32.000Z","updated":"2017-09-19T03:18:47.000Z","comments":true,"path":"photo/Android-使用SQLite导入外部数据库.html","permalink":"http://saml.vip/photo/Android-使用SQLite导入外部数据库.html","excerpt":"","text":"使用SQLite导入外部数据库12345678910111213141516171819202122232425262728293031323334353637需要用到的知识点有数据库的查找、数据库的查询、以及读流、保存本地等。。。1. 先通过控制台找到想用的数据库并导出 1. 此处使用的是SQLite语句2. 将导出的数据库导入到自己项目res下的raw文件夹3. 创建一个类用来将数据库倒成可读写的文件，并保存到本地，然后可在该类中添加数据库的操作方法4. 具体工具类的创建👇: 1. 首先需要先定义数据库的存储空间大小 2. 定义全局自己的数据库名字（别忘了.db后缀名） 3. 定义全局的包名 4. 定义保存在手里存放数据库的位置(具体代码👇)： 1. “/data”+Environment.getDataDirectory().getAbsolutePath()+”/”+定义过得全局包名; 5. 定义全局的SQLiteDatabase 6. 全局Context 7. 还需要一个SQLiteDatabase用于以后的数据库查询 8. 添加构造方法参数为Context 9. 在定义一个无返回值的方法，用来打开数据库，方法内👇： 1. this.定义过得SQLiteDatabase=this.openDatabase(存放在手机里的位置+“/”+数据库名字)； 10. 自定义带参数的构造方法参数为（String xxx） 1. 需要将以下内容放进try，cath里 2. 然后进行判断数据库文件书否存在，若不存在则执行导入，否则直接打开数据库，判断里的内容 1. !(new File(xxx).exists) 3. 添加如导入的数据库 1. InputStream is =this.context.getResources().openRawResource(R.raw.导入的外部数据库名称） 2. FileOutputStream for = new FileOutputStream(构造方法中的参数) 3. byte[] buffer = new byte[数据库存贮的最大空间] 4. 定义int类型的变量并赋值为0 1. while循环，循环参数👇： 1. count = is.read(buffer) &gt; 0 2. 循环的内容👇： 1. fos.write(buffer, 0, count) 5. 关流(fos.close)&amp;&amp;is.close 6. 打开或者创建一个数据库并定义成全局SQLiteDatabase 1. SQLiteDatabase db = SQLiteDatabase。openOrCreateDatabase(dbfile， null)； 2. return db； 4. 接下来就可以写数据库的CRUD方法了 11. 在其他类调用的时候只需要用无惨的构造方法点到承载数据库操作的方法就好了 12. 在要使用的地方new 一个DBMeager然后获得数据库的读写权限，使用后记得调用关闭数据库的方法。"},{"title":"photo","date":"2017-09-19T03:25:15.000Z","updated":"2017-09-19T03:25:15.000Z","comments":true,"path":"photo/index.html","permalink":"http://saml.vip/photo/index.html","excerpt":"","text":""},{"title":"Android","date":"2017-09-19T03:07:54.000Z","updated":"2017-09-19T07:00:58.000Z","comments":false,"path":"photo/Android-倒计时功能.html","permalink":"http://saml.vip/photo/Android-倒计时功能.html","excerpt":"","text":"倒计时功能123456789101112131415161718192021222324该功能主要应用在欢迎页等需要计时的功能中(倒计时时间显示可完善 - 进度条)代码(以欢迎页为例)：1. 首先在XML布局中填写一个TextView用来存放倒计时时间，如果是现实本地图片则需要在放置ImageView控件用来存放显示的图片， 布局可使用relativeLayout，这样ImageView就可以直接当成背景图片来使用2. 在Activity中对两个控件进行绑定(因为添加了点击跳转功能，所以要给TextView添加点击事件)3. 定义全局CountDownTimer4. 在TextView的点击事件里： 1. CountDownTimer.cancel()； // 取消掉CountDownTimer，防止计时结束进行二次跳转 2. 然后同样在点击事件里写Intent跳转Activity 3. 注意添加finish()； // 加finish是因为防止退出程序是再次回到欢迎页面 4. 注意：会先执行完整个方法在跳转，而不是startActivity之后马上跳转5. 设置定时器： 1. 需要对CountDownTimer进行初始化， CountDownTimer( , )的两个参数: 1. 一共多少毫秒走完了之后执行OnFinish方法 2. 每次消耗多少毫秒，走完了之后执行onTick方法 2. 在onTick方法中设置倒计时文字显示(OnTick参数 - 主线程方法)： 1. 参数：当前还剩多少毫秒 2. 设置文字显示：setText（参数 / 1000 + “s”）； 1. “S”为倒计时后面的单位 3. 在onFinish中给textView设置文字并添加Intent跳转 1. 此方法中设置的文字是倒计时走完了之后显示的文字 2. intent跳转之后需要添加finish，为了防止再次进入欢迎界面 4. 最后开启计时器 1. CountDownTimer.start();"},{"title":"Android","date":"2017-09-19T03:02:59.000Z","updated":"2017-09-19T03:21:07.000Z","comments":true,"path":"photo/Android-删除指定文件下的所有文件.html","permalink":"http://saml.vip/photo/Android-删除指定文件下的所有文件.html","excerpt":"","text":"删除指定文件下的所有文件123456789101112131415161718192021222324252627 可以添加在app清理缓存功能中 写在点击事件中直接调用下面的使用方式即可 此方法只能删掉文件夹下所有文件并不能是删掉父文件夹1. 定义一个方法2. static void deleteAllFiles(File root) &#123; File files[] = root.listFiles(); if (files != null) for (File f : files) &#123; if (f.isDirectory()) &#123; // 判断是否为文件夹 deleteAllFiles(f); try &#123; f.delete(); &#125; catch (Exception e) &#123; &#125; &#125; else &#123; if (f.exists()) &#123; // 判断是否存在 deleteAllFiles(f); try &#123; f.delete(); &#125; catch (Exception e) &#123; &#125; &#125; &#125; &#125;&#125;3. 使用的时候: 1. deleteAllFiles(new File(Environment.getExternalStorageDirectory()+&quot;/要删除的文件夹名称/“);"}],"posts":[{"title":"随记","slug":"Mac-终端操作命令","date":"2017-09-19T03:12:16.000Z","updated":"2017-09-19T03:13:20.000Z","comments":true,"path":"2017/09/19/Mac-终端操作命令/","link":"","permalink":"http://saml.vip/2017/09/19/Mac-终端操作命令/","excerpt":"","text":"#Mac 终端操作命令 1.defaults write com.apple.finder AppleShowAllFiles -bool false - 关闭显示隐藏文件2.defaults write com.apple.finder AppleShowAllFiles -bool true - 显示隐藏文件","categories":[],"tags":[]},{"title":"Android","slug":"Android-Banner实现轮播图功能","date":"2017-09-19T03:08:21.000Z","updated":"2017-09-19T03:15:12.000Z","comments":true,"path":"2017/09/19/Android-Banner实现轮播图功能/","link":"","permalink":"http://saml.vip/2017/09/19/Android-Banner实现轮播图功能/","excerpt":"","text":"Banner实现轮播图功能12345678910111213141516171819202122232425使用Banner添加轮播图功能之前需要先添加依赖👇： compile ‘com.youth.banner:banner:1.4.4’ （注意：添加Glide图片处理依赖）具体使用步骤：1. 首先在XML布局中添加Banner当做正常的ImageView来写布局2. 在Activity/Fragment中绑定Banner，并定义全局变量3. 创建轮播图的类 1. 轮播图的类需要继承ImageLoader 2. 复写ImageLoader中的displayImage方法 3. 再其方法中添加Glide.with(context).load(path).into(imageView) 1. 参数2：图片地址/网络请求图片的实体类点出来的/图片名 2. 参数3：控件（ImageView）4. 定义一个集合来承载轮播图 1. 将解析好的轮播图添加到集合5. 完善轮播图 1. 添加轮播图下面的点：banner.setBannerStyle(BannerConfig.CIRCLE_INDICAROR_TITLE); 2. 轮播图的类： banner.setImageLoader(new 轮播图的类); 3. 将集合设置个Banner： 1. banner.setImages(承载图片的集合)； 2. banner.setBannerAnimation(Transformer.DepthPage); 3. banner.isAutoPlay(true); 4. 设置自动滚动时间： 1. banner.setDelayTime(2000); 2. banner.setIndicatorGravity(BannerConfig.CENTER); 5. 最后start开启","categories":[],"tags":[]},{"title":"Android","slug":"Android-倒计时功能","date":"2017-09-19T03:07:54.000Z","updated":"2017-09-19T03:14:21.000Z","comments":true,"path":"2017/09/19/Android-倒计时功能/","link":"","permalink":"http://saml.vip/2017/09/19/Android-倒计时功能/","excerpt":"","text":"倒计时功能123456789101112131415161718192021222324该功能主要应用在欢迎页等需要计时的功能中(倒计时时间显示可完善 - 进度条)代码(以欢迎页为例)：1. 首先在XML布局中填写一个TextView用来存放倒计时时间，如果是现实本地图片则需要在放置ImageView控件用来存放显示的图片， 布局可使用relativeLayout，这样ImageView就可以直接当成背景图片来使用2. 在Activity中对两个控件进行绑定(因为添加了点击跳转功能，所以要给TextView添加点击事件)3. 定义全局CountDownTimer4. 在TextView的点击事件里： 1. CountDownTimer.cancel()； // 取消掉CountDownTimer，防止计时结束进行二次跳转 2. 然后同样在点击事件里写Intent跳转Activity 3. 注意添加finish()； // 加finish是因为防止退出程序是再次回到欢迎页面 4. 注意：会先执行完整个方法在跳转，而不是startActivity之后马上跳转5. 设置定时器： 1. 需要对CountDownTimer进行初始化， CountDownTimer( , )的两个参数: 1. 一共多少毫秒走完了之后执行OnFinish方法 2. 每次消耗多少毫秒，走完了之后执行onTick方法 2. 在onTick方法中设置倒计时文字显示(OnTick参数 - 主线程方法)： 1. 参数：当前还剩多少毫秒 2. 设置文字显示：setText（参数 / 1000 + “s”）； 1. “S”为倒计时后面的单位 3. 在onFinish中给textView设置文字并添加Intent跳转 1. 此方法中设置的文字是倒计时走完了之后显示的文字 2. intent跳转之后需要添加finish，为了防止再次进入欢迎界面 4. 最后开启计时器 1. CountDownTimer.start();","categories":[],"tags":[]},{"title":"Android","slug":"Android-使用SQLite导入外部数据库","date":"2017-09-19T03:07:32.000Z","updated":"2017-09-19T03:18:47.000Z","comments":true,"path":"2017/09/19/Android-使用SQLite导入外部数据库/","link":"","permalink":"http://saml.vip/2017/09/19/Android-使用SQLite导入外部数据库/","excerpt":"","text":"使用SQLite导入外部数据库12345678910111213141516171819202122232425262728293031323334353637需要用到的知识点有数据库的查找、数据库的查询、以及读流、保存本地等。。。1. 先通过控制台找到想用的数据库并导出 1. 此处使用的是SQLite语句2. 将导出的数据库导入到自己项目res下的raw文件夹3. 创建一个类用来将数据库倒成可读写的文件，并保存到本地，然后可在该类中添加数据库的操作方法4. 具体工具类的创建👇: 1. 首先需要先定义数据库的存储空间大小 2. 定义全局自己的数据库名字（别忘了.db后缀名） 3. 定义全局的包名 4. 定义保存在手里存放数据库的位置(具体代码👇)： 1. “/data”+Environment.getDataDirectory().getAbsolutePath()+”/”+定义过得全局包名; 5. 定义全局的SQLiteDatabase 6. 全局Context 7. 还需要一个SQLiteDatabase用于以后的数据库查询 8. 添加构造方法参数为Context 9. 在定义一个无返回值的方法，用来打开数据库，方法内👇： 1. this.定义过得SQLiteDatabase=this.openDatabase(存放在手机里的位置+“/”+数据库名字)； 10. 自定义带参数的构造方法参数为（String xxx） 1. 需要将以下内容放进try，cath里 2. 然后进行判断数据库文件书否存在，若不存在则执行导入，否则直接打开数据库，判断里的内容 1. !(new File(xxx).exists) 3. 添加如导入的数据库 1. InputStream is =this.context.getResources().openRawResource(R.raw.导入的外部数据库名称） 2. FileOutputStream for = new FileOutputStream(构造方法中的参数) 3. byte[] buffer = new byte[数据库存贮的最大空间] 4. 定义int类型的变量并赋值为0 1. while循环，循环参数👇： 1. count = is.read(buffer) &gt; 0 2. 循环的内容👇： 1. fos.write(buffer, 0, count) 5. 关流(fos.close)&amp;&amp;is.close 6. 打开或者创建一个数据库并定义成全局SQLiteDatabase 1. SQLiteDatabase db = SQLiteDatabase。openOrCreateDatabase(dbfile， null)； 2. return db； 4. 接下来就可以写数据库的CRUD方法了 11. 在其他类调用的时候只需要用无惨的构造方法点到承载数据库操作的方法就好了 12. 在要使用的地方new 一个DBMeager然后获得数据库的读写权限，使用后记得调用关闭数据库的方法。","categories":[],"tags":[]},{"title":"Android","slug":"Android-PopupWindow实现弹出窗口","date":"2017-09-19T03:06:31.000Z","updated":"2017-09-19T03:20:07.000Z","comments":true,"path":"2017/09/19/Android-PopupWindow实现弹出窗口/","link":"","permalink":"http://saml.vip/2017/09/19/Android-PopupWindow实现弹出窗口/","excerpt":"","text":"PopupWindow实现弹出窗口12345678910111213141516171819202122232425262728293031323334353637383940414243popupWindow可以弹出一个浮动的窗口，可以显示在屏幕上任意的位置，比对话框更灵活，也可以通过setAnimationStyle方法设置popupWindow显示隐藏动画1. 让PopupWindow显示在某个控件之下 1. 在Activity或Fragment布局上添加控件，并添加该控件的点击事件，点击弹出PopupWindow 2. 先定义PopupWindow布局(布局中可以使用任意组件，若是RecycleLayout、ListView应在铺完主布局后再添加对应的item) 3. 在Activity或Fragent上绑定布局id 4. 自定义Void方法并在最外层布局中控件的点击事件里调用此方法， 1. 在方法内抽取PopupWindow布局 2. 设置PopupWindow弹出是的宽高 1. new PopupWindow（popup布局，LinearLayout.LayoutParams.宽，Line...ms.高） 3. 设置允许在外点击消失，必须给PopupWindow设置背景才会有效 1. pop.setOutsideTouchable(true); 2. pop.setBackgroundDrawable(new BitmapDrawable()); 4. 让PopupWindow显示的位置 1. PopupWindow。showAsDropDown（显示在该控件下方，X位置偏移量，Y位置偏移量）2. 让PopupWindow显示在指定位置，从下往上弹出 1. 自定义方法 1. 在方法内抽取布局 2. 设置宽高 3. 设置允许在外点击消失 4. 设置背景颜色 1. setBackgroundDrawable(new ColorDrawable(颜色值)) 5. 设置动画效果 1. setAnimationStyle(R.id动画的布局文件); 6. 让PopupWindow显示 1. 参数1：根视图，整个PopupWindow界面最顶层 2. 参数2：显示位置 3. 具体代码👇： 1. PopupWindow.showAtLocation(getWindow().getDecorView(),Gravity.BOTTOM,0,0)；3. PopupWindow点击跳转到对应的Fragment 1. 如果PopupWindow中放的是RecycleView 1. 那么首先就要先定义RecycleView的点击事件 1. 定义的点击事件必须是接口形式的存在interface 2. 可以直接存在使用点击事件的类中，也可以单独写一个接口类 2. 点击事件定义好了需要在适配器中定义并添加带参的构造方法通知刷新 3. 在onCreateViewHolder方法中添加判断 1. 判断的条件是接口点击事件不为空 1. 给item设置点击事件 2. 并定义一个int型的参数= holder。getLayoutPosition 3. 点击事件的变量名.onClick(定义的int型的变量名) 4. 适配器配置好了之后再定义PopupWindow的地方添加点击事件 1. 适配器.set点击事件（new 接口点击事件（）&#123;PopupWindow.dismiss()；viewPager.setCurrentItem(position,false)&#125;）； 2. 添加False是为了ViewPager无回滚效果 5. 最后添加在显示PopupWindow显示的代码上面","categories":[],"tags":[]},{"title":"Android","slug":"Android-WebView的使用方法","date":"2017-09-19T03:05:54.000Z","updated":"2017-09-19T03:19:30.000Z","comments":true,"path":"2017/09/19/Android-WebView的使用方法/","link":"","permalink":"http://saml.vip/2017/09/19/Android-WebView的使用方法/","excerpt":"","text":"WebView的使用方法123456789101112131415161718192021首先在Xml布局中添加WebView控件1. 如果以及界面使用的是ListView那么在对应的Fragmetn中需要添加onItemClick方法2. 并且给ListVIew绑定之后设置点击事件： 1. 点击事件为setOnItemClickListenr（this）3. 创建显示二级界面的Activity4. 在onItemClick方法中填写Intent跳转 1. 定义String类型的网址（这个网址是从接口中解析出来的） 2. 将这个网址通过Intent传给对应显示的Activity 3. 最后startActivity（Intent）5. 在定义显示的Activity中 1. Intent intent = getintent（）； 2. 然后接受之前传来的网址 1. String str = intent。getStringExtra（“对应的口令”）； 3. 给WebView绑定视图 4. 给WebView绑定网址 1. webView。loadUrl（网址） 5. 设置视图 1. webView。getSettings().setJavaScriptEnabled(true); 6. 让webView显示在固定工程里 1. webView.setWebViewClient(new WebViewClient())6. 要是一级界面使用的RecycleView的话需要将方法写在RecycleView点击时间里","categories":[],"tags":[]},{"title":"Android","slug":"Android-Dialog实现方法","date":"2017-09-19T03:05:07.000Z","updated":"2017-09-19T03:15:57.000Z","comments":true,"path":"2017/09/19/Android-Dialog实现方法/","link":"","permalink":"http://saml.vip/2017/09/19/Android-Dialog实现方法/","excerpt":"","text":"Dialog实现方法123456789101112131415161718192021222324使用Dialog时应该先进行初始化绑定也就是new一个Dialog出来1. 具体代码 1. AlertDialog dialog = new AlertDialog.Builder(对应的Activity.this);2. 可以添加自定义布局给Dialog 1. dialog.setView(已经设置好的布局文件); 2. 其布局文件中的操作方法与正常布局文件的操作方法相同3. 自定义关闭Dialog按钮的点击事件中应该让Dialog先赋值给父类的AlertDialog 1. 也就是: AlertDialog alertDialog = dialog.show();这行代码既让dialog赋值给了父类,也开启了Dialog,原因是因为Dialog是没有dismiss方法的,所以要赋值给父类. 2. 这样就可以正常些Dialog布局上控件的点击事件了. 3. 在点击事件中用父类的AlertDialog.dismiss();这样自定的关闭Dialog按钮就写好了.4. 如果配合PopupWindow使用可能会出现PopupWindow无法收起的情况,如果出现了这种情况只需要在PopupWindow的点击事件中添加dismiss();方法就可已解决了.5. Dialog自带属性设置 1. 可以设置标题 1. setTitle 2. 设置内容(一般都是自定义内容) 3. 设置内容布局 1. setView 4. 可以设置自带的按钮 1. setNeutralButton 5. 设置YES按钮 1. setPositiveButton 6. 设置No按钮 1. setNegativeButton 7. 最后设置.show();方法即可显示对话框","categories":[],"tags":[]},{"title":"Android","slug":"Android-在As中获得SHA1、MD5","date":"2017-09-19T03:04:03.000Z","updated":"2017-09-19T03:16:45.000Z","comments":true,"path":"2017/09/19/Android-在As中获得SHA1、MD5/","link":"","permalink":"http://saml.vip/2017/09/19/Android-在As中获得SHA1、MD5/","excerpt":"","text":"在As中获得SHA1、MD51234561. 第一步需要将小机器人调成Android状态2. 选中Gradle Scripts3. 点击右边的Gradle、(操作下一步之前最好刷新一下)、展开MyApplication4. 展开Tasks、展开android5. 双击signingReport6. 看日志，(Run)点击绿色开始按钮旁边的按钮就能看到SHA1、MD5了","categories":[],"tags":[]},{"title":"Android","slug":"Android-删除指定文件下的所有文件","date":"2017-09-19T03:02:59.000Z","updated":"2017-09-19T03:21:07.000Z","comments":true,"path":"2017/09/19/Android-删除指定文件下的所有文件/","link":"","permalink":"http://saml.vip/2017/09/19/Android-删除指定文件下的所有文件/","excerpt":"","text":"删除指定文件下的所有文件123456789101112131415161718192021222324252627 可以添加在app清理缓存功能中 写在点击事件中直接调用下面的使用方式即可 此方法只能删掉文件夹下所有文件并不能是删掉父文件夹1. 定义一个方法2. static void deleteAllFiles(File root) &#123; File files[] = root.listFiles(); if (files != null) for (File f : files) &#123; if (f.isDirectory()) &#123; // 判断是否为文件夹 deleteAllFiles(f); try &#123; f.delete(); &#125; catch (Exception e) &#123; &#125; &#125; else &#123; if (f.exists()) &#123; // 判断是否存在 deleteAllFiles(f); try &#123; f.delete(); &#125; catch (Exception e) &#123; &#125; &#125; &#125; &#125;&#125;3. 使用的时候: 1. deleteAllFiles(new File(Environment.getExternalStorageDirectory()+&quot;/要删除的文件夹名称/“);","categories":[],"tags":[]},{"title":"Android","slug":"Android-随记","date":"2017-09-19T03:02:09.000Z","updated":"2017-09-19T03:17:52.000Z","comments":true,"path":"2017/09/19/Android-随记/","link":"","permalink":"http://saml.vip/2017/09/19/Android-随记/","excerpt":"","text":"随记12345678910111213141516171819202122232425262728293031321.okhttp 封装 张洪洋的博客中摘取,并且下载Demo 进行用到功能的摘抄与整理2. 请求成功后得到字符串,但是返回的是实体类形式,需要使用json转化成实体类进行操作3. ImageLoader进行图片加载,需要判断是不是https如果是https需要使用另一种方法进行封装添加证书才能加载4. 时间戳转换成时间的方法 1. 待完善5. 数字保留两位小数 1. 需要定义成float类型 2. 将float变量/100.006. String 字符串截取 1. String str = &quot;一教楼101室” 2. Pattern p = Pattern.compile(&quot;\\\\d+&quot;); 3. Matcher m = p.matcher(str); 4. m.find(); 7. 图片的圆角处理 1. 待完善8. 图片转成Base64格式 1. 2. 图片处理 1. 9. PopupWindow封装 1. 待完善10. Android 中 bitmap转成String字符串的方法 1. public static String bitmaptoString(Bitmap bitmap) &#123; 2. String string = null; 3. ByteArrayOutputStream bStream = new ByteArrayOutputStream(); 4. bitmap.compress(CompressFormat.PNG, 40, bStream); 5. byte[] bytes = bStream.toByteArray(); 6. string = Base64.encodeToString(bytes, Base64.DEFAULT); 7. return string; 8. &#125;11. TextView 显示固定字符数之后自动换行: 1. android:maxEms=“每行固定显示的字数”","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2017-09-18T08:29:59.000Z","updated":"2017-09-19T03:21:38.000Z","comments":true,"path":"2017/09/18/hello-world/","link":"","permalink":"http://saml.vip/2017/09/18/hello-world/","excerpt":"","text":"第一篇博客 博客正在完善中…","categories":[],"tags":[]}]}